<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>人脸识别</title>
    <url>/2019/11/25/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<p> 人脸识别，是基于人的脸部特征信息进行身份识别的一种生物识别技术。用摄像机或摄像头采集含有人脸的图像或视频流，并自动在图像中检测和跟踪人脸，进而对检测到的人脸进行脸部识别的一系列相关技术，通常也叫做人像识别、面部识别。 </p>
<a id="more"></a>

<h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1.环境准备"></a>1.环境准备</h1><h2 id="1-1-安装-Anconda，创建新环境。"><a href="#1-1-安装-Anconda，创建新环境。" class="headerlink" title="1.1 安装 Anconda，创建新环境。"></a>1.1 安装 <a href="https://www.jianshu.com/p/742dc4d8f4c5" target="_blank" rel="noopener">Anconda</a>，创建新环境。</h2><h2 id="1-2-安装pycharm"><a href="#1-2-安装pycharm" class="headerlink" title="1.2 安装pycharm"></a>1.2 安装<a href="https://www.runoob.com/w3cnote/pycharm-windows-install.html" target="_blank" rel="noopener">pycharm</a></h2><h2 id="1-2-在新环境中安装-Opencv、os、sleep等第三方包。"><a href="#1-2-在新环境中安装-Opencv、os、sleep等第三方包。" class="headerlink" title="1.2 在新环境中安装 Opencv、os、sleep等第三方包。"></a>1.2 在新环境中安装 Opencv、os、sleep等第三方包。</h2><p><strong>激活新环境，pip 安装第三方包。</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install cv2</span><br><span class="line">pip install os</span><br><span class="line">pip install sleep</span><br></pre></td></tr></table></figure>



<h1 id="2-人脸识别流程"><a href="#2-人脸识别流程" class="headerlink" title="2.人脸识别流程"></a>2.人脸识别流程</h1><p>人脸识别系统主要包括四个组成部分，分别为：人脸图像采集及检测、人脸图像预处理、人脸图像特征提取以及匹配与识别。</p>
<h2 id="2-1-人脸图像采集及检测"><a href="#2-1-人脸图像采集及检测" class="headerlink" title="2.1 人脸图像采集及检测"></a>2.1 人脸图像采集及检测</h2><p>人脸图像采集：不同的人脸图像都能通过摄像镜头采集下来，比如静态图像、动态图像、不同的位置、不同表情等方面都可以得到很好的采集。当用户在采集设备的拍摄范围内时，采集设备会自动搜索并拍摄用户的人脸图像。</p>
<p>人脸检测：人脸检测在实际中主要用于人脸识别的预处理，即在图像中准确标定出人脸的位置和大小。人脸图像中包含的模式特征十分丰富，如直方图特征、颜色特征、模板特征、结构特征及Haar特征等。人脸检测就是把这其中有用的信息挑出来，并利用这些特征实现人脸检测。</p>
<p>主流的人脸检测方法基于以上特征采用Adaboost学习算法，Adaboost算法是一种用来分类的方法，它把一些比较弱的分类方法合在一起，组合出新的很强的分类方法。</p>
<p>人脸检测过程中使用Adaboost算法挑选出一些最能代表人脸的矩形特征(弱分类器)，按照加权投票的方式将弱分类器构造为一个强分类器，再将训练得到的若干强分类器串联组成一个级联结构的层叠分类器，有效地提高分类器的检测速度。</p>
<h2 id="2-2-人脸图像预处理"><a href="#2-2-人脸图像预处理" class="headerlink" title="2.2 人脸图像预处理"></a>2.2 人脸图像预处理</h2><p>人脸图像预处理：对于人脸的图像预处理是基于人脸检测结果，对图像进行处理并最终服务于特征提取的过程。系统获取的原始图像由于受到各种条件的限制和随机干扰，往往不能直接使用，必须在图像处理的早期阶段对它进行灰度校正、噪声过滤等图像预处理。对于人脸图像而言，其预处理过程主要包括人脸图像的光线补偿、灰度变换、直方图均衡化、归一化、几何校正、滤波以及锐化等。</p>
<h2 id="2-3-人脸图像特征提取"><a href="#2-3-人脸图像特征提取" class="headerlink" title="2.3 人脸图像特征提取"></a>2.3 人脸图像特征提取</h2><p>人脸图像特征提取：人脸识别系统可使用的特征通常分为视觉特征、像素统计特征、人脸图像变换系数特征、人脸图像代数特征等。人脸特征提取就是针对人脸的某些特征进行的。人脸特征提取，也称人脸表征，它是对人脸进行特征建模的过程。</p>
<h2 id="2-4-人脸图像匹配与识别"><a href="#2-4-人脸图像匹配与识别" class="headerlink" title="2.4 人脸图像匹配与识别"></a>2.4 人脸图像匹配与识别</h2><p>人脸图像匹配与识别：提取的人脸图像的特征数据与数据库中存储的特征模板进行搜索匹配，通过设定一个阈值，当相似度超过这一阈值，则把匹配得到的结果输出。人脸识别就是将待识别的人脸特征与已得到的人脸特征模板进行比较，根据相似程度对人脸的身份信息进行判断。这一过程又分为两类：一类是确认，是一对一进行图像比较的过程，另一类是辨认，是一对多进行图像匹配对比的过程。</p>
<h1 id="3-人脸识别程序实现"><a href="#3-人脸识别程序实现" class="headerlink" title="3 人脸识别程序实现"></a>3 人脸识别程序实现</h1><h2 id="3-1-人脸图像采集及检测"><a href="#3-1-人脸图像采集及检测" class="headerlink" title="3.1 人脸图像采集及检测"></a>3.1 人脸图像采集及检测</h2><p><strong>人脸保存</strong>。新建目录 newface，用来保存人脸，代码奉上。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def find_dir(Person_name):</span><br><span class="line">    # 读取目录</span><br><span class="line">    findfile = os.listdir(&quot;newface&quot;)</span><br><span class="line">    # 转列表 然后从新排序</span><br><span class="line">    list = []</span><br><span class="line">    for i in findfile:</span><br><span class="line">        list.append(int(i.split(&apos;_&apos;)[0]))</span><br><span class="line">    list.sort()  # 大小排序</span><br><span class="line">    # 判断目录是否为空 ，空写入0 否则按照顺序添加</span><br><span class="line">    if list == []:</span><br><span class="line">        os.mkdir(&apos;newface/0_%s&apos; % Person_name)</span><br><span class="line">        folder_number = &apos;0&apos;</span><br><span class="line">    else:</span><br><span class="line">        # 目录不为空，直接添加</span><br><span class="line">        folder_number = str(int(list[-1]) + 1)</span><br><span class="line">        os.mkdir(&apos;newface/%s_%s&apos; % (folder_number, Person_name))</span><br><span class="line">    return folder_number</span><br></pre></td></tr></table></figure>

<p>find_dir函数：在newface文件夹下生成以人名命名的文件夹，文件下保存该人的人脸</p>
<p><strong>人脸采集。</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 收集人脸</span><br><span class="line">def collect_face():</span><br><span class="line">    # 导入识别人脸模块</span><br><span class="line">    faceModel= cv2.CascadeClassifier(&apos;face.xml&apos;)</span><br><span class="line">    # 打开摄像头收集人脸</span><br><span class="line">    # VideoCapture  0表示本地摄像头，1表示外部摄像头</span><br><span class="line">    capture = cv2.VideoCapture(0)</span><br><span class="line">    # 输入识别人的姓名</span><br><span class="line">    PersonName = input(&apos;请输入姓名:--&gt;&apos;)</span><br><span class="line">    FolderName = find_dir(PersonName)</span><br><span class="line">    # 定义变量，后面要用</span><br><span class="line">    counter = 0</span><br><span class="line">    Number_samples = 20</span><br><span class="line">    sleep(2)</span><br><span class="line">    while True:</span><br><span class="line">        # 读取摄像头数据，ret=ture or false 表示是否有人脸，frame是一帧一帧的图片</span><br><span class="line">        ret, frame = capture.read()</span><br><span class="line">        #灰度化图片，face.xml识别的是灰度图像中的人脸</span><br><span class="line">        gray = cv2.cvtColor(src=frame, code=cv2.COLOR_RGB2GRAY)</span><br><span class="line">        # 检测人脸 给我了一个坐标</span><br><span class="line">        faces = faceModel.detectMultiScale(frame, scaleFactor=1.2, minSize=(200, 200))</span><br><span class="line">        # 标记人脸&amp;取图片</span><br><span class="line">        for (x, y, w, h) in faces:</span><br><span class="line">            #记数，记录采集的图片的数目</span><br><span class="line">            counter += 1</span><br><span class="line">            #画摄像头人脸边框</span><br><span class="line">            cv2.rectangle(frame, pt1=(x, y), pt2=(x + w, y + h), color=(0, 255, 0), thickness=2)</span><br><span class="line">            #保存图片</span><br><span class="line">            counter=str(counter)</span><br><span class="line">            final_name = &apos;newface/&apos; + FolderName + &apos;_&apos; + PersonName + &apos;/&apos; + FolderName + &apos;_&apos; + &apos;%s.jpg&apos; % str(</span><br><span class="line">                PersonName + &apos;_&apos; + counter)</span><br><span class="line">            counter = int(counter)</span><br><span class="line">            SaveImg = Image.fromarray(gray)  # PIL直接读取 数组 然后存图片</span><br><span class="line">            SaveImg.save(fp=final_name)</span><br><span class="line">            Img = Image.open(fp=final_name)</span><br><span class="line">            # 截取头像 需要适当加大截取框</span><br><span class="line">            CropImg = Img.crop((x - 40, y - 40, x + w + 40, y + h + 40))  </span><br><span class="line">            CropImg.save(fp=final_name)</span><br><span class="line">            #显示采集的图片数目</span><br><span class="line">            cv2.putText(frame, &apos;%s Images collected&apos; % str(counter), org=(x, y - 10), fontScale=1,fontFace=cv2.FONT_HERSHEY_COMPLEX, color=(0, 255, 0), thickness=1)</span><br><span class="line">            #显示图片</span><br><span class="line">            cv2.imshow(&apos;LIVEface&apos;, frame)</span><br><span class="line">        # 如果已经收到足够量的样本就停</span><br><span class="line">        if counter &gt; Number_samples:</span><br><span class="line">            break</span><br><span class="line">        # 或者x退出</span><br><span class="line">        if cv2.waitKey(40) &amp; 0xFF == ord(&apos;x&apos;):</span><br><span class="line">            break</span><br><span class="line">    capture.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>代码中face.xml文件为cv2\data\haarcascade_frontalface_default.xml文件，我这里直接拿出来了。</p>
<p>代码中sheep（2）,打开机器的摄像头需要点时间，休眠等待下。</p>
<p>collect_face函数：用来收集人脸。采集人脸的方法有很多，基于图像处理和深度学习算法都可以用来采集人脸，但我做的效果都没有cv2自带的好，这里就直接用cv2中现有的算法采集人脸。</p>
<h2 id="3-2-人脸图像预处理"><a href="#3-2-人脸图像预处理" class="headerlink" title="3.2 人脸图像预处理"></a>3.2 人脸图像预处理</h2><p>将采集到的图像处理为相同大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_dir</span><span class="params">(address)</span>:</span></span><br><span class="line">    <span class="comment"># 读取目录</span></span><br><span class="line">    filepath = <span class="string">'D:\\pycharm projects\\OpenCV\\wj\\newface'</span></span><br><span class="line">    fileNames = os.listdir(filepath)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> fileNames:</span><br><span class="line">        newDir = filepath + <span class="string">'/'</span> + file</span><br><span class="line">        path = newDir</span><br><span class="line">        fileNames_1 = os.listdir(path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> fileNames_1:</span><br><span class="line">            img = cv2.imread(path+<span class="string">'/'</span>+i,<span class="number">0</span>)</span><br><span class="line">            pic = cv2.resize(img, (<span class="number">200</span>, <span class="number">200</span>), interpolation=cv2.INTER_CUBIC)</span><br><span class="line">            final_name = <span class="string">'train_folder/'</span> +i</span><br><span class="line"></span><br><span class="line">            SaveImg = Image.fromarray(pic)  <span class="comment"># PIL直接读取 数组 然后存图片</span></span><br><span class="line">            SaveImg.save(fp=final_name)</span><br></pre></td></tr></table></figure>

<p>find_dir函数：将采集到的人脸图像处理为200*200大小。</p>
<p>3.3 人脸图像的特征提取与模型训练。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#读取数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readImages</span><span class="params">()</span>:</span></span><br><span class="line">    x, y = [], []</span><br><span class="line">    filepath = <span class="string">r'D:\pycharm projects\OpenCV\wj\train_folder'</span></span><br><span class="line">    fileNames = os.listdir(filepath)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> fileNames:</span><br><span class="line">        newDir =filepath+<span class="string">"\\"</span>+file</span><br><span class="line">        img = cv2.imread(newDir, cv2.IMREAD_GRAYSCALE)</span><br><span class="line">        img = cv2.resize(img, (<span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line">        x.append(np.asarray(img, dtype=np.uint8)) <span class="comment">#x是训练数据</span></span><br><span class="line">        y.append(int(file.split(<span class="string">'_'</span>)[<span class="number">0</span>]))         <span class="comment">#y是训练数据标签</span></span><br><span class="line"></span><br><span class="line">    y = np.asarray(y, dtype=np.int32)</span><br><span class="line">    <span class="keyword">return</span> x, y</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#模型训练与保存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">face_rec</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 获取数据</span></span><br><span class="line">    x, y = readImages()</span><br><span class="line">    <span class="comment"># print(x[0].shape)</span></span><br><span class="line">    <span class="comment"># 人脸识别的模型</span></span><br><span class="line">    model = cv2.face.EigenFaceRecognizer_create()</span><br><span class="line">    <span class="comment"># fisherfaces算法的模型</span></span><br><span class="line">    <span class="comment"># model = cv2.face.FisherFaceRecognizer_create()</span></span><br><span class="line">    <span class="comment"># LBPH算法的模型</span></span><br><span class="line">    <span class="comment"># model = cv2.face.LBPHFaceRecognizer_create()</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Eigenfaces和Fisherfaces 预测时候产生0到20000的评分</span></span><br><span class="line"><span class="string">        低于4000 5000 的评分都是相当可靠的</span></span><br><span class="line"><span class="string">    LBPH 产生评分不同，低于50是可靠的 高于80是不可靠的</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 训练模型</span></span><br><span class="line">    model.train(np.asarray(x), np.asarray(y))</span><br><span class="line">    <span class="comment">#model.save("facemodel.txt")</span></span><br></pre></td></tr></table></figure>

<p>这里模型同样用的cv2现有的模型，感兴趣的可以尝试fisherfaces算法的模型和LBPH算法的模型。</p>
<p>3.4 人脸识别。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">orc</span><span class="params">(model)</span>:</span></span><br><span class="line">    faceModel = cv2.CascadeClassifier(<span class="string">'face.xml'</span>)</span><br><span class="line">    capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        count = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 读取摄像头内容</span></span><br><span class="line">        ret, frame = capture.read()</span><br><span class="line">        <span class="comment"># 3维数据变一维</span></span><br><span class="line">        gray = cv2.cvtColor(src=frame, code=cv2.COLOR_RGB2GRAY)</span><br><span class="line">        <span class="comment"># 检测人脸</span></span><br><span class="line">        faces = faceModel.detectMultiScale(gray, scaleFactor=<span class="number">1.2</span>)</span><br><span class="line">        <span class="comment"># 标记人脸</span></span><br><span class="line">        <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">            cv2.rectangle(frame, pt1=(x, y), pt2=(x + w, y + h), color=(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), thickness=<span class="number">2</span>)</span><br><span class="line">            SaveImg = Image.fromarray(gray) <span class="comment"># PIL直接读取 数组</span></span><br><span class="line">            SaveImg=np.array(SaveImg)</span><br><span class="line">            <span class="comment">#图片大小处理</span></span><br><span class="line">            pic = cv2.resize(SaveImg, (<span class="number">200</span>, <span class="number">200</span>), interpolation=cv2.INTER_CUBIC)</span><br><span class="line"></span><br><span class="line">            a=int(model.predict(pic)[<span class="number">0</span>])</span><br><span class="line">            laber=[<span class="string">'wangjie'</span>,<span class="string">'wangkailun'</span>,<span class="string">'fengjingbao'</span>]</span><br><span class="line">            cv2.putText(frame, laber[a], (x, y), cv2.FONT_HERSHEY_SCRIPT_SIMPLEX, <span class="number">1</span>, (<span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line">            cv2.imshow(<span class="string">'face'</span>, frame)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xff</span> == ord(<span class="string">'x'</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    capture.release()</span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>

<p>orc函数为人脸识别，传入的model为3.3中保存的模型，最后效果如下图。</p>
<p><img src="https://blog-1300775928.cos.ap-chengdu.myqcloud.com/%E4%BA%BA%E8%84%B8%E8%AF%86%E5%88%AB/image-20191125220743144.png" alt=""></p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
  </entry>
  <entry>
    <title>java环境配置</title>
    <url>/2019/11/24/java%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h1 id="java环境配置"><a href="#java环境配置" class="headerlink" title="java环境配置"></a>java环境配置</h1><h2 id="1-jdk1-8下载"><a href="#1-jdk1-8下载" class="headerlink" title="1.jdk1.8下载"></a>1.jdk1.8下载</h2><a id="more"></a>

<p>下载地址：<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p>1.1 打开链接如图，点击Downloads。</p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574519694569.png" alt="1574519694569"></p>
<p><strong>1.2 网页下翻，找到Java SE Development Kit 8u231,点击接受License Agreement后找到对应jdk版本下载</strong>.</p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574520000241.png" alt="1574520000241"></p>
<h2 id="2-jdk1-8安装"><a href="#2-jdk1-8安装" class="headerlink" title="2.jdk1.8安装"></a>2.jdk1.8安装</h2><p><strong>2.1 解压刚下载的文件后打开，会出现如下窗口，安装Java SE，直接点击下一步。</strong></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574520521565.png" alt="1574520521565"></p>
<p><strong>2.2 选择安装目录，后点击下一步。</strong></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574520735939.png" alt="1574520735939"></p>
<p><strong>2.3  java SE 安装完后回弹出窗口java安装</strong>。选择安装位置，点击下一步</p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574521068513.png" alt="1574521068513"></p>
<p><strong>2.4 等待安装完成即可。</strong></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574521148433.png" alt="1574521148433"></p>
<h2 id="3-环境配置"><a href="#3-环境配置" class="headerlink" title="3 环境配置"></a>3 环境配置</h2><p><strong>3.1 进入系统的环境变量，点击环境变量</strong>。</p>
<p>（鼠标<strong>右键</strong>我的电脑，点击<strong>属性</strong>后点击 <strong>高级系统设置</strong>）</p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574522143475.png" alt="1574522143475"></p>
<p><strong>3.2  配置变量一  ：JAVA_HOMR(jdk安装的所在位置）</strong></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574522346666.png" alt="1574522346666"></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574522498231.png" alt="1574522498231"></p>
<p><strong>3.3 配置变量二 PATH 。</strong></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574522620953.png" alt="1574522620953"></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574522995349.png" alt="1574522995349"></p>
<p><strong>3.4 配置变量三 CLASSPATH</strong></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574523141637.png" alt="1574523141637"></p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574523307793.png" alt="1574523307793"></p>
<p><strong>3.5 测试是否成功</strong></p>
<p>运行框中输入cmd ，后在dos窗口输入javac，出现下图则恭喜配置成功。</p>
<p><img src="C:%5CUsers%5Cwj123456%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1574523438453.png" alt="1574523438453"></p>
]]></content>
      <categories>
        <category>java</category>
      </categories>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2019/11/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
